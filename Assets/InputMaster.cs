//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""TimeManipulation"",
            ""id"": ""0c3590d8-b53a-486f-8eff-e13c01dcee7f"",
            ""actions"": [
                {
                    ""name"": ""AdvanceHour"",
                    ""type"": ""Button"",
                    ""id"": ""0f969199-ee95-45a3-a51f-813ecd2ea3d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AdvanceDay"",
                    ""type"": ""Button"",
                    ""id"": ""d8285182-a943-48e1-b07b-d2f8ec737068"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AdvanceSeason"",
                    ""type"": ""Button"",
                    ""id"": ""69a8ea45-956b-4fe6-8d4d-a56423e77720"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e93d3c84-1337-4710-8372-1b356aa8ad84"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AdvanceHour"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4751b7e-1a42-4996-b34d-46686065c0dc"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AdvanceDay"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32c131ad-3f07-4aa9-ac37-32ae10433d23"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AdvanceSeason"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SettlementChange"",
            ""id"": ""b06658be-8a0e-4d36-ab70-40f03980380b"",
            ""actions"": [
                {
                    ""name"": ""MoveToFirstNeighbour"",
                    ""type"": ""Button"",
                    ""id"": ""242f4fce-eaba-4000-8c68-d74284acd65f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cd966579-8cc8-42b1-82cf-013be29dbb42"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveToFirstNeighbour"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TimeManipulation
        m_TimeManipulation = asset.FindActionMap("TimeManipulation", throwIfNotFound: true);
        m_TimeManipulation_AdvanceHour = m_TimeManipulation.FindAction("AdvanceHour", throwIfNotFound: true);
        m_TimeManipulation_AdvanceDay = m_TimeManipulation.FindAction("AdvanceDay", throwIfNotFound: true);
        m_TimeManipulation_AdvanceSeason = m_TimeManipulation.FindAction("AdvanceSeason", throwIfNotFound: true);
        // SettlementChange
        m_SettlementChange = asset.FindActionMap("SettlementChange", throwIfNotFound: true);
        m_SettlementChange_MoveToFirstNeighbour = m_SettlementChange.FindAction("MoveToFirstNeighbour", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TimeManipulation
    private readonly InputActionMap m_TimeManipulation;
    private List<ITimeManipulationActions> m_TimeManipulationActionsCallbackInterfaces = new List<ITimeManipulationActions>();
    private readonly InputAction m_TimeManipulation_AdvanceHour;
    private readonly InputAction m_TimeManipulation_AdvanceDay;
    private readonly InputAction m_TimeManipulation_AdvanceSeason;
    public struct TimeManipulationActions
    {
        private @InputMaster m_Wrapper;
        public TimeManipulationActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @AdvanceHour => m_Wrapper.m_TimeManipulation_AdvanceHour;
        public InputAction @AdvanceDay => m_Wrapper.m_TimeManipulation_AdvanceDay;
        public InputAction @AdvanceSeason => m_Wrapper.m_TimeManipulation_AdvanceSeason;
        public InputActionMap Get() { return m_Wrapper.m_TimeManipulation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TimeManipulationActions set) { return set.Get(); }
        public void AddCallbacks(ITimeManipulationActions instance)
        {
            if (instance == null || m_Wrapper.m_TimeManipulationActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TimeManipulationActionsCallbackInterfaces.Add(instance);
            @AdvanceHour.started += instance.OnAdvanceHour;
            @AdvanceHour.performed += instance.OnAdvanceHour;
            @AdvanceHour.canceled += instance.OnAdvanceHour;
            @AdvanceDay.started += instance.OnAdvanceDay;
            @AdvanceDay.performed += instance.OnAdvanceDay;
            @AdvanceDay.canceled += instance.OnAdvanceDay;
            @AdvanceSeason.started += instance.OnAdvanceSeason;
            @AdvanceSeason.performed += instance.OnAdvanceSeason;
            @AdvanceSeason.canceled += instance.OnAdvanceSeason;
        }

        private void UnregisterCallbacks(ITimeManipulationActions instance)
        {
            @AdvanceHour.started -= instance.OnAdvanceHour;
            @AdvanceHour.performed -= instance.OnAdvanceHour;
            @AdvanceHour.canceled -= instance.OnAdvanceHour;
            @AdvanceDay.started -= instance.OnAdvanceDay;
            @AdvanceDay.performed -= instance.OnAdvanceDay;
            @AdvanceDay.canceled -= instance.OnAdvanceDay;
            @AdvanceSeason.started -= instance.OnAdvanceSeason;
            @AdvanceSeason.performed -= instance.OnAdvanceSeason;
            @AdvanceSeason.canceled -= instance.OnAdvanceSeason;
        }

        public void RemoveCallbacks(ITimeManipulationActions instance)
        {
            if (m_Wrapper.m_TimeManipulationActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITimeManipulationActions instance)
        {
            foreach (var item in m_Wrapper.m_TimeManipulationActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TimeManipulationActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TimeManipulationActions @TimeManipulation => new TimeManipulationActions(this);

    // SettlementChange
    private readonly InputActionMap m_SettlementChange;
    private List<ISettlementChangeActions> m_SettlementChangeActionsCallbackInterfaces = new List<ISettlementChangeActions>();
    private readonly InputAction m_SettlementChange_MoveToFirstNeighbour;
    public struct SettlementChangeActions
    {
        private @InputMaster m_Wrapper;
        public SettlementChangeActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveToFirstNeighbour => m_Wrapper.m_SettlementChange_MoveToFirstNeighbour;
        public InputActionMap Get() { return m_Wrapper.m_SettlementChange; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SettlementChangeActions set) { return set.Get(); }
        public void AddCallbacks(ISettlementChangeActions instance)
        {
            if (instance == null || m_Wrapper.m_SettlementChangeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SettlementChangeActionsCallbackInterfaces.Add(instance);
            @MoveToFirstNeighbour.started += instance.OnMoveToFirstNeighbour;
            @MoveToFirstNeighbour.performed += instance.OnMoveToFirstNeighbour;
            @MoveToFirstNeighbour.canceled += instance.OnMoveToFirstNeighbour;
        }

        private void UnregisterCallbacks(ISettlementChangeActions instance)
        {
            @MoveToFirstNeighbour.started -= instance.OnMoveToFirstNeighbour;
            @MoveToFirstNeighbour.performed -= instance.OnMoveToFirstNeighbour;
            @MoveToFirstNeighbour.canceled -= instance.OnMoveToFirstNeighbour;
        }

        public void RemoveCallbacks(ISettlementChangeActions instance)
        {
            if (m_Wrapper.m_SettlementChangeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISettlementChangeActions instance)
        {
            foreach (var item in m_Wrapper.m_SettlementChangeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SettlementChangeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SettlementChangeActions @SettlementChange => new SettlementChangeActions(this);
    public interface ITimeManipulationActions
    {
        void OnAdvanceHour(InputAction.CallbackContext context);
        void OnAdvanceDay(InputAction.CallbackContext context);
        void OnAdvanceSeason(InputAction.CallbackContext context);
    }
    public interface ISettlementChangeActions
    {
        void OnMoveToFirstNeighbour(InputAction.CallbackContext context);
    }
}
